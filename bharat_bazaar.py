# -*- coding: utf-8 -*-
"""Bharat_Bazaar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14U94XnuXYbdzSuSQmo9Pa2_nqGfkQ5Al?usp=sharing
"""

import random

# -- Game Constants --

properties = [
    "Start", "Mumbai", "Community Chest", "Delhi", "Income Tax", "Chhatrapati Terminus",
    "Pune", "Chance", "Ahmedabad", "Surat", "Jail", "Jaipur", "Rajiv Gandhi Airport",
    "Lucknow", "Kanpur", "Water Works", "Howrah Junction", "Bangalore", "Community Chest", "Hyderabad",
    "Chennai", "Free Parking", "Bhopal", "Chance", "Nagpur", "Indore", "Secunderabad Station",
    "Kolkata", "Electric Company", "Guwahati", "Go to Jail", "Kempegowda Airport", "Cochin", "Mysore",
    "Varanasi", "Community Chest", "Patna", "Chandigarh Junction",
    "Luxury Tax", "Lottery"
]

# set of non buyable properties
non_buyable = {
    "Start", "Community Chest", "Chance", "Income Tax", "Jail", "Free Parking", "Go to Jail",
    "Lottery", "Luxury Tax", "Water Works", "Electric Company"
}

# list of buyable properties
unsold = [prop for prop in properties if prop not in non_buyable]
sold = []
owner = []

# prices and rents
property_prices = {prop: 200 for prop in unsold}
rent_prices = {prop: 50 for prop in unsold}

# -- Chance Card Effects --

chance_cards = [
    {"text": "Income Tax Refund! Collect ₹50.", "effect": lambda player: setattr(player, "money", player.money + 50)},
    {"text": "Speeding Fine! Pay ₹50.", "effect": lambda player: setattr(player, "money", player.money - 50)}
]

# -- Player Class --

class Player:
    def __init__(self, name):
        self.name = name
        self.position = 0
        self.money = 1500
        self.assets = []

# -- Utility Functions --

def die_roll():
    """Simulate rolling two dice."""
    return random.randint(2, 12)

def handle_chance(player):
    """Apply a random chance card effect to the player."""
    card = random.choice(chance_cards)
    print(f"📦 CHANCE CARD: {card['text']}")
    card["effect"](player)

def check_position(pos, i, players, injail):
    """Handle what happens when a player lands on a board square."""
    current_property = properties[pos]
    player = players[i]

    if current_property == "Jail" and injail[i] == 0:
        print("You are visiting Jail.")
        injail[i] += 1

    elif current_property == "Chance":
        handle_chance(player)

    elif current_property in unsold:
        price = property_prices[current_property]
        print(f"Do you want to buy '{current_property}' for ₹{price}?")
        try:
            choice = int(input("1) Yes\n2) No\n"))
            if choice == 1:
                if player.money >= price:
                    player.money -= price
                    unsold.remove(current_property)
                    sold.append(current_property)
                    owner.append(i)
                    player.assets.append(current_property)
                    print(f"You bought {current_property}")
                else:
                    print("Not enough money to buy the property.")
        except ValueError:
            print("Invalid input.")

    elif current_property in sold:
        owner_index = owner[sold.index(current_property)]
        if i != owner_index:
            rent = rent_prices[current_property]
            print(f"You landed on {current_property}, owned by {players[owner_index].name}.")
            print(f"Paying rent of ₹{rent}.")
            player.money -= rent
            players[owner_index].money += rent

# -- Main Game Loop --

def main():
    try:
        total_players = int(input("Enter number of players (min 2): "))
        if total_players < 2:
            print("At least 2 players required.")
            return
    except ValueError:
        print("Invalid number.")
        return

    players = []
    injail = [0] * total_players

    for i in range(total_players):
        name = input(f"Enter name for player {i+1}: ")
        players.append(Player(name))

    while True:
        # Win condition check
        if total_players == 1:
            winner = [p for p in players if p.name != "bankrupt"][0]
            print(f"\n🏆 {winner.name} wins the game!")
            return

        for i in range(len(players)):
            if players[i].name == "bankrupt":
                continue

            if injail[i] == 1:
                print(f"{players[i].name} is skipping a turn due to Jail.")
                injail[i] = 0
                continue

            if players[i].money < 0:
                print(f"{players[i].name} is out of money and is bankrupt.")
                players[i].name = "bankrupt"
                players[i].assets = []
                total_players -= 1
                continue

            while True:
                try:
                    choice = int(input(
                        f"\n{players[i].name}, what will you do?\n"
                        f"1) Roll die\n2) Declare bankrupt\n3) View properties\n"
                        f"Money: ₹{players[i].money}\nChoice: "
                    ))

                    if choice == 1:
                        roll = die_roll()
                        print(f"You rolled a {roll}")

                        old_pos = players[i].position
                        new_pos = (old_pos + roll) % len(properties)

                        if old_pos + roll >= len(properties):
                            players[i].money += 200
                            print("You passed Start and received ₹200.")

                        players[i].position = new_pos
                        print(f"You are on '{properties[new_pos]}'")
                        check_position(new_pos, i, players, injail)
                        break

                    elif choice == 2:
                        print(f"{players[i].name} has declared bankruptcy.")
                        players[i].name = "bankrupt"
                        players[i].assets = []
                        total_players -= 1
                        break

                    elif choice == 3:
                        print(f"Your properties: {players[i].assets}")
                    else:
                        print("Choose 1, 2, or 3.")
                except ValueError:
                    print("Enter a valid number.")

# -- Run the Game --

if __name__ == "__main__":
    main()
